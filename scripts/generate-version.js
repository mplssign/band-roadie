#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Read package.json
const packageJsonPath = path.join(__dirname, '../package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

// Detect environment
function detectEnvironment() {
  if (process.env.VERCEL_ENV === 'production') return 'production';
  if (process.env.VERCEL_ENV === 'preview') return 'preview';
  if (process.env.NODE_ENV === 'production') return 'production';
  if (process.env.NODE_ENV === 'development') return 'development';
  return 'development';
}

// Get git commit hash
function getGitCommit() {
  try {
    return execSync('git rev-parse --short HEAD', { encoding: 'utf8' }).trim();
  } catch (error) {
    return 'unknown';
  }
}

// Detect platform
function detectPlatform() {
  const appPlatform = process.env.APP_PLATFORM;
  if (appPlatform) {
    return {
      platform: appPlatform,
      platformLabel: getPlatformLabel(appPlatform)
    };
  }
  
  // Default to PWA for web builds
  return {
    platform: 'pwa',
    platformLabel: 'PWA'
  };
}

function getPlatformLabel(platform) {
  const platformMap = {
    'pwa': 'PWA',
    'web': 'PWA',
    'ios': 'iOS',
    'rn-ios': 'iOS',
    'android': 'Android',
    'rn-android': 'Android'
  };
  return platformMap[platform] || 'PWA';
}

// Parse version components
function parseVersion(version) {
  const [mainVersion, prerelease] = version.split('-');
  return {
    semver: mainVersion,
    prerelease: prerelease || null
  };
}

// Generate version display string
function generateVersionDisplay(versionMeta) {
  const { semver, prerelease, build, env, platformLabel } = versionMeta;
  
  let versionString = semver;
  
  if (env === 'development') {
    versionString += prerelease ? `-${prerelease}` : '-beta.dev';
    versionString += ` (local) • ${platformLabel}`;
  } else if (env === 'preview') {
    versionString += prerelease ? `-${prerelease}` : '-beta.1';
    versionString += ` (${build}) • ${platformLabel}`;
  } else if (env === 'production') {
    versionString += ` (${build}) • ${platformLabel}`;
  } else {
    // Fallback
    versionString += prerelease ? `-${prerelease}` : '-beta.1';
    versionString += ` (${build}) • ${platformLabel}`;
  }
  
  return versionString;
}

// Main execution
function generateVersionFile() {
  const env = detectEnvironment();
  const gitCommit = getGitCommit();
  const { platform, platformLabel } = detectPlatform();
  const { semver, prerelease } = parseVersion(packageJson.version);
  
  const versionMeta = {
    semver,
    prerelease,
    build: gitCommit,
    env,
    platform,
    platformLabel
  };
  
  const appVersion = generateVersionDisplay(versionMeta);
  
  const versionFileContent = `// This file is auto-generated by scripts/generate-version.js
// Do not edit manually

export const APP_VERSION = "${appVersion}";

export const APP_VERSION_META = {
  semver: "${semver}",
  prerelease: ${prerelease ? `"${prerelease}"` : 'null'},
  build: "${gitCommit}",
  env: "${env}",
  platform: "${platform}",
  platformLabel: "${platformLabel}"
};

export const APP_NAME = "BandRoadie";
`;

  // Ensure src directory exists
  const srcDir = path.join(__dirname, '../src');
  if (!fs.existsSync(srcDir)) {
    fs.mkdirSync(srcDir, { recursive: true });
  }
  
  // Write version file
  const versionFilePath = path.join(srcDir, 'version.ts');
  fs.writeFileSync(versionFilePath, versionFileContent);
  
  // Version generation completed
}

if (require.main === module) {
  generateVersionFile();
}

module.exports = { generateVersionFile };